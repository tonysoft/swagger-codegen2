var swagger = require("swagger-node-express");
var thisAPI = null;
try {
  thisAPI = require("./{{classname}}_impl");
}
catch (e) {
  // No implementation has been provided yet..
  // But that's OK because each end-point defined below will remind us...
}
var url = require("url");
var errors = swagger.errors;
var params = swagger.params;

/* add model includes */

function writeResponse (response, data, status) {
  response.header('Access-Control-Allow-Origin', "*");
  response.header("Access-Control-Allow-Methods", "GET, POST, DELETE, PUT");
  response.header("Access-Control-Allow-Headers", "Content-Type");
  response.header("Content-Type", "application/json; charset=utf-8");
  if (status) {
    response.status(status).send(JSON.stringify(data));
  }
  else {
    response.send(JSON.stringify(data));
  }
}

exports.models = models = require("../models.js");

{{#operations}}
{{#operation}}
exports.{{nickname}} = {
  'spec': {
    "description" : "Operations about pets",
    "path" : "{{path}}",
    "notes" : "{{{notes}}}",
    "summary" : "{{{summary}}}",
    "method": "{{httpMethod}}",
    "params" : [{{#queryParams}}
      params.query("{{paramName}}", "{{description}}", "{{swaggerDataType}}", {{required}}, {{allowMultiple}}, "{{{allowableValues}}}"{{#defaultValue}}, {{{defaultValue}}}{{/defaultValue}}){{#hasMore}},{{/hasMore}}
    {{/queryParams}}].concat([{{#pathParams}}
      params.path("/:{{paramName}}", "{{description}}"){{#hasMore}},{{/hasMore}}
    {{/pathParams}}]).concat([{{#headerParams}}
      params.header("{{paramName}}", "{{description}}"){{#hasMore}},{{/hasMore}}
    {{/headerParams}}]).concat([{{#bodyParams}}
      params.body("body", "{{swaggerDataType}}", "{{description}}", {{#required}}{{required}}{{/required}}{{^required}}false{{/required}})
    {{/bodyParams}}]),
    "type" : "{{returnType}}",
    "responseMessages" : [errors.invalid('id'), errors.notFound('{{returnType}}')],
    "nickname" : "{{nickname}}"
  },
  'action': function (req,res) {
    {{#requiredParamCount}}
    {{#requiredParams}}
    if (!req.params.{{baseName}}) {
      throw errors.invalid('{{baseName}}');
    }
    {{/requiredParams}}
    {{/requiredParamCount}}
    try {
      thisAPI.{{nickname}}(req, res, writeResponse, function(resMessage) {
        console.log("{{nickname}}:", resMessage);    
      });
    } catch(e) {
      writeResponse(res, {message: "how about implementing {{classname}}_impl.{{nickname}} as a {{httpMethod}} method?"});    
    }
  }
};
{{/operation}}
{{/operations}}